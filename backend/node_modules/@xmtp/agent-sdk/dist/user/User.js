import { createWalletClient, http, toBytes, } from "viem";
import { generatePrivateKey, privateKeyToAccount } from "viem/accounts";
import { sepolia } from "viem/chains";
export const createUser = (key, chain = sepolia) => {
    const accountKey = key ?? generatePrivateKey();
    const account = privateKeyToAccount(accountKey);
    return {
        key: accountKey,
        account,
        wallet: createWalletClient({
            account,
            chain,
            transport: http(),
        }),
    };
};
export const createIdentifier = (user) => ({
    identifier: user.account.address.toLowerCase(),
    identifierKind: 0 /* IdentifierKind.Ethereum */,
});
export const createSigner = (user) => {
    const identifier = createIdentifier(user);
    return {
        type: "EOA",
        getIdentifier: () => identifier,
        signMessage: async (message) => {
            const signature = await user.wallet.signMessage({
                account: user.account,
                message,
            });
            return toBytes(signature);
        },
    };
};
//# sourceMappingURL=User.js.map