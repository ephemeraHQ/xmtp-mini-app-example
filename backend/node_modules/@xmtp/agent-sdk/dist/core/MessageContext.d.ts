import type { ContentCodec } from "@xmtp/content-type-primitives";
import { type Reaction, type ReactionCodec } from "@xmtp/content-type-reaction";
import type { RemoteAttachmentCodec } from "@xmtp/content-type-remote-attachment";
import { type ReplyCodec } from "@xmtp/content-type-reply";
import { type TextCodec } from "@xmtp/content-type-text";
import { type DecodedMessageWithContent } from "../core/filter.js";
import type { AgentBaseContext } from "./Agent.js";
import { ConversationContext } from "./ConversationContext.js";
export type MessageContextParams<ContentTypes = unknown> = Omit<AgentBaseContext<ContentTypes>, "message"> & {
    message: DecodedMessageWithContent<ContentTypes>;
};
export declare class MessageContext<ContentTypes = unknown> extends ConversationContext<ContentTypes> {
    #private;
    constructor({ message, conversation, client, }: MessageContextParams<ContentTypes>);
    usesCodec<T extends ContentCodec>(codecClass: new () => T): this is MessageContext<ReturnType<T["decode"]>>;
    isText(): this is MessageContext<ReturnType<TextCodec["decode"]>>;
    isReply(): this is MessageContext<ReturnType<ReplyCodec["decode"]>>;
    isReaction(): this is MessageContext<ReturnType<ReactionCodec["decode"]>>;
    isRemoteAttachment(): this is MessageContext<ReturnType<RemoteAttachmentCodec["decode"]>>;
    sendReaction(content: string, schema?: Reaction["schema"]): Promise<void>;
    sendText(text: string): Promise<void>;
    sendTextReply(text: string): Promise<void>;
    getSenderAddress(): Promise<string | undefined>;
    get message(): DecodedMessageWithContent<ContentTypes>;
}
