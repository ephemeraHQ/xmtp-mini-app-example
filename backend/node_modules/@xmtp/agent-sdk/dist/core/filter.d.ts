import { type GroupUpdatedCodec } from "@xmtp/content-type-group-updated";
import { type ReactionCodec } from "@xmtp/content-type-reaction";
import { type RemoteAttachmentCodec } from "@xmtp/content-type-remote-attachment";
import { type ReplyCodec } from "@xmtp/content-type-reply";
import { type TextCodec } from "@xmtp/content-type-text";
import { Dm, Group, type Client, type Conversation, type DecodedMessage } from "@xmtp/node-sdk";
export type DecodedMessageWithContent<ContentTypes = unknown> = DecodedMessage<ContentTypes> & {
    content: ContentTypes;
};
export declare const filter: {
    fromSelf: <ContentTypes>(message: DecodedMessage<ContentTypes>, client: Client<ContentTypes>) => boolean;
    hasContent: <ContentTypes>(message: DecodedMessage<ContentTypes>) => message is DecodedMessageWithContent<ContentTypes>;
    isDM: (conversation: Conversation) => conversation is Dm;
    isGroup: (conversation: Conversation) => conversation is Group;
    isGroupAdmin: (conversation: Conversation, message: DecodedMessage) => boolean;
    isGroupSuperAdmin: (conversation: Conversation, message: DecodedMessage) => boolean;
    isGroupUpdate: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<GroupUpdatedCodec["decode"]>;
    };
    isReaction: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<ReactionCodec["decode"]>;
    };
    isRemoteAttachment: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<RemoteAttachmentCodec["decode"]>;
    };
    isReply: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<ReplyCodec["decode"]>;
    };
    isText: (message: DecodedMessage) => message is DecodedMessageWithContent<ReturnType<TextCodec["decode"]>>;
    isTextReply: (message: DecodedMessage) => boolean;
};
export declare const f: {
    fromSelf: <ContentTypes>(message: DecodedMessage<ContentTypes>, client: Client<ContentTypes>) => boolean;
    hasContent: <ContentTypes>(message: DecodedMessage<ContentTypes>) => message is DecodedMessageWithContent<ContentTypes>;
    isDM: (conversation: Conversation) => conversation is Dm;
    isGroup: (conversation: Conversation) => conversation is Group;
    isGroupAdmin: (conversation: Conversation, message: DecodedMessage) => boolean;
    isGroupSuperAdmin: (conversation: Conversation, message: DecodedMessage) => boolean;
    isGroupUpdate: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<GroupUpdatedCodec["decode"]>;
    };
    isReaction: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<ReactionCodec["decode"]>;
    };
    isRemoteAttachment: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<RemoteAttachmentCodec["decode"]>;
    };
    isReply: (message: DecodedMessage) => message is DecodedMessage & {
        content: ReturnType<ReplyCodec["decode"]>;
    };
    isText: (message: DecodedMessage) => message is DecodedMessageWithContent<ReturnType<TextCodec["decode"]>>;
    isTextReply: (message: DecodedMessage) => boolean;
};
