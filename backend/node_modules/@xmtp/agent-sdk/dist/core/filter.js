import { ContentTypeGroupUpdated, } from "@xmtp/content-type-group-updated";
import { ContentTypeReaction, } from "@xmtp/content-type-reaction";
import { ContentTypeRemoteAttachment, } from "@xmtp/content-type-remote-attachment";
import { ContentTypeReply } from "@xmtp/content-type-reply";
import { ContentTypeText } from "@xmtp/content-type-text";
import { Dm, Group, } from "@xmtp/node-sdk";
const fromSelf = (message, client) => {
    return message.senderInboxId === client.inboxId;
};
const hasContent = (message) => {
    return message.content !== undefined && message.content !== null;
};
const isDM = (conversation) => {
    return conversation instanceof Dm;
};
const isGroup = (conversation) => {
    return conversation instanceof Group;
};
const isGroupAdmin = (conversation, message) => {
    if (isGroup(conversation)) {
        return conversation.isAdmin(message.senderInboxId);
    }
    return false;
};
const isGroupSuperAdmin = (conversation, message) => {
    if (isGroup(conversation)) {
        return conversation.isSuperAdmin(message.senderInboxId);
    }
    return false;
};
const isGroupUpdate = (message) => {
    return !!message.contentType?.sameAs(ContentTypeGroupUpdated);
};
const isReaction = (message) => {
    return !!message.contentType?.sameAs(ContentTypeReaction);
};
const isReply = (message) => {
    return !!message.contentType?.sameAs(ContentTypeReply);
};
const isRemoteAttachment = (message) => {
    return !!message.contentType?.sameAs(ContentTypeRemoteAttachment);
};
const isText = (message) => {
    return !!message.contentType?.sameAs(ContentTypeText);
};
const isTextReply = (message) => {
    return isReply(message) && typeof message.content.content === "string";
};
export const filter = {
    fromSelf,
    hasContent,
    isDM,
    isGroup,
    isGroupAdmin,
    isGroupSuperAdmin,
    isGroupUpdate,
    isReaction,
    isRemoteAttachment,
    isReply,
    isText,
    isTextReply,
};
export const f = filter;
//# sourceMappingURL=filter.js.map