import EventEmitter from "node:events";
import type { GroupUpdatedCodec } from "@xmtp/content-type-group-updated";
import type { ContentCodec } from "@xmtp/content-type-primitives";
import { ReactionCodec } from "@xmtp/content-type-reaction";
import { RemoteAttachmentCodec } from "@xmtp/content-type-remote-attachment";
import { ReplyCodec } from "@xmtp/content-type-reply";
import type { TextCodec } from "@xmtp/content-type-text";
import { Client, Dm, Group, type ClientOptions, type Conversation, type CreateDmOptions, type CreateGroupOptions, type DecodedMessage } from "@xmtp/node-sdk";
import { ClientContext } from "./ClientContext.js";
import { ConversationContext } from "./ConversationContext.js";
import { MessageContext } from "./MessageContext.js";
type EventHandlerMap<ContentTypes> = {
    attachment: [
        ctx: MessageContext<ReturnType<RemoteAttachmentCodec["decode"]>>
    ];
    conversation: [ctx: ConversationContext<ContentTypes>];
    "group-update": [
        ctx: MessageContext<ReturnType<GroupUpdatedCodec["decode"]>>
    ];
    dm: [ctx: ConversationContext<ContentTypes, Dm<ContentTypes>>];
    group: [ctx: ConversationContext<ContentTypes, Group<ContentTypes>>];
    message: [ctx: MessageContext<ContentTypes>];
    reaction: [ctx: MessageContext<ReturnType<ReactionCodec["decode"]>>];
    reply: [ctx: MessageContext<ReturnType<ReplyCodec["decode"]>>];
    start: [ctx: ClientContext<ContentTypes>];
    stop: [ctx: ClientContext<ContentTypes>];
    text: [ctx: MessageContext<ReturnType<TextCodec["decode"]>>];
    unhandledError: [error: Error];
    unknownMessage: [ctx: MessageContext<ContentTypes>];
};
export type AgentBaseContext<ContentTypes = unknown> = {
    client: Client<ContentTypes>;
    conversation: Conversation;
    message: DecodedMessage;
};
export type AgentErrorContext<ContentTypes = unknown> = Partial<AgentBaseContext<ContentTypes>> & {
    client: Client<ContentTypes>;
};
export type AgentOptions<ContentTypes> = {
    client: Client<ContentTypes>;
};
export type AgentMessageHandler<ContentTypes = unknown> = (ctx: MessageContext<ContentTypes>) => Promise<void> | void;
export type AgentMiddleware<ContentTypes = unknown> = (ctx: MessageContext<ContentTypes>, next: () => Promise<void> | void) => Promise<void>;
export type AgentErrorMiddleware<ContentTypes = unknown> = (error: unknown, ctx: AgentErrorContext<ContentTypes>, next: (err?: unknown) => Promise<void> | void) => Promise<void> | void;
export type StreamAllMessagesOptions<ContentTypes> = Parameters<Client<ContentTypes>["conversations"]["streamAllMessages"]>[0];
export type AgentErrorRegistrar<ContentTypes> = {
    use(...errorMiddleware: Array<AgentErrorMiddleware<ContentTypes> | AgentErrorMiddleware<ContentTypes>[]>): AgentErrorRegistrar<ContentTypes>;
};
export declare class Agent<ContentTypes = unknown> extends EventEmitter<EventHandlerMap<ContentTypes>> {
    #private;
    constructor({ client }: AgentOptions<ContentTypes>);
    static create<ContentCodecs extends ContentCodec[] = []>(signer: Parameters<typeof Client.create>[0], options?: Omit<ClientOptions, "codecs"> & {
        codecs?: ContentCodecs;
    }): Promise<Agent<import("@xmtp/node-sdk").ExtractCodecContentTypes<(ReactionCodec | ReplyCodec | RemoteAttachmentCodec | (never[] | ContentCodecs)[number])[]>>>;
    static createFromEnv<ContentCodecs extends ContentCodec[] = []>(options?: Omit<ClientOptions, "codecs"> & {
        codecs?: ContentCodecs;
    }): Promise<Agent<import("@xmtp/node-sdk").ExtractCodecContentTypes<(ReactionCodec | ReplyCodec | RemoteAttachmentCodec | (never[] | ContentCodecs)[number])[]>>>;
    use(...middleware: Array<AgentMiddleware<ContentTypes> | AgentMiddleware<ContentTypes>[]>): this;
    start(): Promise<void>;
    get client(): Client<ContentTypes>;
    get errors(): AgentErrorRegistrar<ContentTypes>;
    stop(): Promise<void>;
    createDmWithAddress(address: `0x${string}`, options?: CreateDmOptions): Promise<Dm<ContentTypes>>;
    createGroupWithAddresses(addresses: `0x${string}`[], options?: CreateGroupOptions): Promise<Group<ContentTypes>>;
    get address(): string | undefined;
}
export {};
