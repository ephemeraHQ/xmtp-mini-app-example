import type { GroupUpdated } from "@xmtp/content-type-group-updated";
import type { Reaction } from "@xmtp/content-type-reaction";
import type { RemoteAttachment } from "@xmtp/content-type-remote-attachment";
import type { Reply } from "@xmtp/content-type-reply";
import type { Client, Conversation, DecodedMessage } from "@xmtp/node-sdk";
import type { Mock } from "vitest";
import { Agent } from "../core/Agent.js";
import type { DecodedMessageWithContent } from "../core/filter.js";
export type CurrentClientTypes = string | Reaction | Reply | RemoteAttachment | GroupUpdated;
export declare const createMockMessage: <ContentType>(overrides: Partial<DecodedMessage> & {
    content: ContentType;
}) => DecodedMessageWithContent<ContentType>;
export declare const makeAgent: () => {
    agent: Agent<string | import("@xmtp/proto/ts/dist/types/mls/message_contents/transcript_messages.pb.js").GroupUpdated>;
    mockClient: Client<string | import("@xmtp/proto/ts/dist/types/mls/message_contents/transcript_messages.pb.js").GroupUpdated> & {
        conversations: {
            stream: Mock;
            streamAllMessages: Mock;
        };
    };
};
export declare const mockClient: Client & {
    conversations: {
        stream: Mock;
        streamAllMessages: Mock;
    };
};
export declare const createMockStreamWithCallbacks: (messages: DecodedMessage[]) => Mock<(...args: any[]) => any>;
export declare const createMockConversationStreamWithCallbacks: (conversations: Conversation[]) => Mock<(...args: any[]) => any>;
export declare const flushMicrotasks: () => Promise<void>;
